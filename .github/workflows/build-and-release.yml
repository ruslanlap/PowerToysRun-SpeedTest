name: Build and Release SpeedTest Plugin

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'

# Permissions for GITHUB_TOKEN (principle of least privilege)
permissions:
  contents: write  # Needed for creating releases
  issues: read
  pull-requests: read

# Add restrictions for parallel runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Build
        run: dotnet build SpeedTest/SpeedTest.sln -c Release -p:Platform="${{ matrix.platform }}"
      
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Debug Output
        run: |
          Get-ChildItem -Path "SpeedTest" -Recurse -Directory | Where-Object { $_.Name -eq "Release" } | ForEach-Object { Write-Host $_.FullName }
        shell: pwsh
      
      - name: Create output directory
        run: mkdir -p artifacts
      
      - name: Copy build output to artifacts directory
        run: |
          $artifactDir = "artifacts/SpeedTest-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          
          # Create the artifact directory
          New-Item -ItemType Directory -Force -Path $artifactDir
          
          # Create SpeedTest subfolder
          New-Item -ItemType Directory -Force -Path "$artifactDir/SpeedTest"
          
          # Define the direct path to the build output
          $buildOutput = "SpeedTest/Community.PowerToys.Run.Plugin.SpeedTest/bin/${{ matrix.platform }}/Release"
          
          Write-Host "Using build output directory: $buildOutput"
          
          # Check if the directory exists
          if (-not (Test-Path $buildOutput)) {
            Write-Host "Build output directory not found at expected path. Searching for it..."
            $buildOutput = Get-ChildItem -Path "SpeedTest" -Recurse -Directory | 
                           Where-Object { $_.Name -eq "Release" -and $_.FullName -like "*${{ matrix.platform }}*" } | 
                           Select-Object -First 1 -ExpandProperty FullName
            
            if ($buildOutput) {
              Write-Host "Found build output directory: $buildOutput"
            } else {
              Write-Error "Could not find any Release directory for platform ${{ matrix.platform }}"
              exit 1
            }
          }
          
          # Check if build output exists before proceeding
          if (-not (Test-Path $buildOutput)) {
            Write-Error "Build output directory not found"
            exit 1
          }
          
          # Check for files directly in the build output directory
          $files = Get-ChildItem -Path $buildOutput -File
          if ($files.Count -gt 0) {
            Write-Host "Found $($files.Count) files in build output directory. Copying directly..."
            Copy-Item -Path "$buildOutput/*" -Destination "$artifactDir/SpeedTest" -Recurse -Force
            Write-Host "Files copied successfully"
          } else {
            # Look for a .NET runtime folder
            $runtimeFolder = Get-ChildItem -Path $buildOutput -Directory | 
                             Where-Object { $_.Name -like "net*-windows*" } | 
                             Select-Object -First 1 -ExpandProperty FullName
            
            if ($runtimeFolder) {
              Write-Host "Found runtime folder: $runtimeFolder"
              Copy-Item -Path "$runtimeFolder/*" -Destination "$artifactDir/SpeedTest" -Recurse -Force
              Write-Host "Files copied successfully from runtime folder"
            } else {
              # If no runtime folder, check for any subdirectories
              $subDirs = Get-ChildItem -Path $buildOutput -Directory
              if ($subDirs.Count -gt 0) {
                $firstSubDir = $subDirs[0].FullName
                Write-Host "No runtime folder found, but found subdirectory: $firstSubDir"
                Copy-Item -Path "$firstSubDir/*" -Destination "$artifactDir/SpeedTest" -Recurse -Force
                Write-Host "Files copied from first subdirectory"
              } else {
                Write-Error "No files or subdirectories found in build output directory"
                exit 1
              }
            }
          }
        shell: pwsh
      
      - name: Create ZIP archive
        run: |
          $artifactDir = "artifacts/SpeedTest-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          Compress-Archive -Path "$artifactDir/SpeedTest/*" -DestinationPath "$artifactDir.zip"
        shell: pwsh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}
          path: artifacts/*.zip
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts
      
      # Debug step to see what files are available
      - name: List downloaded artifacts
        run: |
          echo "Listing downloaded artifacts directory:"
          ls -la downloaded-artifacts
          echo "Listing x64 artifacts:"
          ls -la downloaded-artifacts/build-artifacts-x64 || echo "No x64 artifacts found"
          echo "Listing ARM64 artifacts:"
          ls -la downloaded-artifacts/build-artifacts-arm64 || echo "No ARM64 artifacts found"
      
      # Copy artifacts to the expected location with the correct names
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          cp downloaded-artifacts/build-artifacts-x64/*.zip release-artifacts/SpeedTest-x64.zip || echo "Failed to copy x64 artifact"
          cp downloaded-artifacts/build-artifacts-arm64/*.zip release-artifacts/SpeedTest-ARM64.zip || echo "Failed to copy ARM64 artifact"
          echo "Listing release artifacts:"
          ls -la release-artifacts
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Prepare Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOL'
          # SpeedTest Plugin v0.90.1

          <img src="https://raw.githubusercontent.com/ruslanlap/PowerToysRun-SpeedTest/master/SpeedTest/data/logo.png" alt="SpeedTest Logo" width="32" height="32" />

          ![Demo](https://raw.githubusercontent.com/ruslanlap/PowerToysRun-SpeedTest/master/SpeedTest/data/demo-speedtest(1).gif)

          ## What is SpeedTest Plugin?

          SpeedTest Plugin lets you run internet speed tests directly from PowerToys Run (Alt+Space) on Windows. Just type `speedtest` and instantly see your download/upload speeds, ping, and server info—no browser or external app needed.

          ### Key Features
          - Real-time speed test results (download, upload, ping)
          - Uses official Ookla CLI for accuracy
          - Modern, theme-adaptive UI (dark/light)
          - Copy/share results easily
          - No persistent storage—privacy-friendly
          - Easy install: just extract and use!

          ## What's New in v0.90.1
          - Initial public release
          - Fast, accurate speed tests
          - Beautiful WPF UI
          - One-click copy/share

          EOL
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: SpeedTest Plugin v0.90.1
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: |
            release-artifacts/SpeedTest-x64.zip
            release-artifacts/SpeedTest-ARM64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
